name: CI

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - uses: pre-commit/action@v3.0.1

  # Make sure commit messages follow the conventional commits convention:
  # https://www.conventionalcommits.org
  commitlint:
    name: Lint Commit Messages
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - uses: wagoid/commitlint-github-action@v6.2.1

  test:
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.10"
          - "3.11"
          - "3.12"
          - "3.13"
        os:
          - ubuntu-latest
    #          - windows-latest
    #          - macOS-latest
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: ${{ matrix.python-version }}
      - uses: astral-sh/setup-uv@v6
      - run: uv sync --no-python-downloads
        shell: bash
      - run: uv run pytest
        shell: bash
      - uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  release:
    needs:
      - test
      - lint
      - commitlint

    runs-on: self-hosted
    environment: release
    concurrency: release
    permissions:
      id-token: write
      attestations: write
      contents: write

    outputs:
      released: ${{ steps.release.outputs.released }}
      tag: ${{ steps.release.outputs.tag }}

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          fetch-tags: true
          ref: main

      # Do a dry run of PSR
      - name: Test release
        uses: python-semantic-release/python-semantic-release@v10
        if: github.ref_name != 'main'
        with:
          root_options: --noop
          github_token: noop

      # On main branch: actual PSR + upload to PyPI & GitHub
      - name: Release
        uses: python-semantic-release/python-semantic-release@v10
        id: release
        if: github.ref_name == 'main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Attest build provenance
        uses: actions/attest-build-provenance@v2
        if: steps.release.outputs.released == 'true'
        with:
          subject-path: "dist/*"

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        if: steps.release.outputs.released == 'true'

      - name: Publish package distributions to GitHub Releases
        uses: python-semantic-release/publish-action@v10
        if: steps.release.outputs.released == 'true'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.release.outputs.tag }}

  build_executables:
    needs: release
    if: needs.release.outputs.released == 'true'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.14"

      - name: Install PyInstaller
        run: pip install pyinstaller

      - name: Update spec file with OS-specific icons
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            sed -i 's|icon=None|icon="assets/icon.ico"|g' dataslicer.spec
          elif [ "$RUNNER_OS" == "Linux" ]; then
            sed -i 's|icon=None|icon="assets/icon.png"|g' dataslicer.spec
          elif [ "$RUNNER_OS" == "macOS" ]; then
            sed -i '' 's|icon=None|icon="assets/icon.icns"|g' dataslicer.spec
          fi
        shell: bash

      - name: Build Executable
        run: |
          pip install .
          pyinstaller dataslicer.spec

          # List files to debug
          echo "Contents of dist directory:"
          ls -la dist/

          # Find and rename the executable based on OS
          if [ "$RUNNER_OS" == "Windows" ]; then
            # Find the .exe file in dist
            EXE_FILE=$(find dist -name "*.exe" | head -n 1)
            if [ -n "$EXE_FILE" ]; then
              mv "$EXE_FILE" dist/dataslicer-windows-${{ needs.release.outputs.tag }}.exe
            else
              echo "Error: Windows executable not found in dist directory"
              exit 1
            fi
          elif [ "$RUNNER_OS" == "Linux" ]; then
            # Find the Linux executable (no extension)
            EXE_FILE=$(find dist -type f -executable -not -name "*.so" -not -name "*.dll" | head -n 1)
            if [ -n "$EXE_FILE" ]; then
              mv "$EXE_FILE" dist/dataslicer-linux-${{ needs.release.outputs.tag }}
            else
              echo "Error: Linux executable not found in dist directory"
              exit 1
            fi
          elif [ "$RUNNER_OS" == "macOS" ]; then
            # Find the macOS executable (no extension)
            EXE_FILE=$(find dist -type f -perm +111 -not -name "*.so" -not -name "*.dylib" | head -n 1)
            if [ -n "$EXE_FILE" ]; then
              mv "$EXE_FILE" dist/dataslicer-macos-${{ needs.release.outputs.tag }}
            else
              echo "Error: macOS executable not found in dist directory"
              exit 1
            fi
          fi

          # Show final contents
          echo "Final contents of dist directory:"
          ls -la dist/
        shell: bash

      - name: Upload Executable
        uses: actions/upload-artifact@v4
        with:
          name: dataslicer-${{ matrix.os }}-${{ needs.release.outputs.tag }}
          path: dist/*

  upload_executables:
    needs:
      - build_executables
      - release
    if: needs.release.outputs.released == 'true'
    runs-on: self-hosted
    permissions:
      contents: write
    steps:
      - name: Download all executables
        uses: actions/download-artifact@v4
        with:
          path: executables

      - name: List Downloaded Files
        run: ls -R executables

      - name: Create flat directory
        run: mkdir -p flat

      - name: Copy executables to flat directory
        run: |
          find executables -type f -name "dataslicer-windows-*.exe" -exec cp {} flat/ \;
          find executables -type f -name "dataslicer-linux-*" ! -path "*/main.app/*" -exec cp {} flat/ \;
          find executables -type f -name "dataslicer-macos-*" ! -path "*/main.app/*" -exec cp {} flat/ \;

      - name: Verify Files in Flat Directory
        run: ls -la flat/

      - name: Upload executables to GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.release.outputs.tag }}
          files: flat/*
          token: ${{ secrets.GITHUB_TOKEN }}
